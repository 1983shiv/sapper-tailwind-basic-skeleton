import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, b as space, e as element, t as text, c as create_component, y as query_selector_all, h as detach_dev, j as claim_space, f as claim_element, g as children, k as claim_text, l as claim_component, m as attr_dev, n as add_location, o as insert_dev, p as append_dev, q as mount_component, M as set_data_dev, u as transition_in, w as transition_out, x as destroy_component } from './client.66758637.js';
import { a as findByTag } from './Tags.a974cee7.js';
import { P as PostList } from './PostList.defe255b.js';
import './_commonjsHelpers.91583ccb.js';

/* src\routes\tag\[tag].svelte generated by Svelte v3.38.2 */
const file = "src\\routes\\tag\\[tag].svelte";

function create_fragment(ctx) {
	let title_value;
	let t0;
	let section;
	let div1;
	let h1;
	let span0;
	let t1;
	let t2;
	let span1;
	let t3;
	let t4;
	let div0;
	let postlist;
	let current;
	document.title = title_value = "#" + /*tag*/ ctx[0];

	postlist = new PostList({
			props: { posts: /*posts*/ ctx[1] },
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			div1 = element("div");
			h1 = element("h1");
			span0 = element("span");
			t1 = text("#");
			t2 = space();
			span1 = element("span");
			t3 = text(/*tag*/ ctx[0]);
			t4 = space();
			div0 = element("div");
			create_component(postlist.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-cbc6fm\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div1 = claim_element(section_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h1 = claim_element(div1_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			span0 = claim_element(h1_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t1 = claim_text(span0_nodes, "#");
			span0_nodes.forEach(detach_dev);
			t2 = claim_space(h1_nodes);
			span1 = claim_element(h1_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t3 = claim_text(span1_nodes, /*tag*/ ctx[0]);
			span1_nodes.forEach(detach_dev);
			h1_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(postlist.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "class", "block xl:inline");
			add_location(span0, file, 25, 6, 603);
			attr_dev(span1, "class", "block text-pink-600 xl:inline");
			add_location(span1, file, 26, 6, 649);
			attr_dev(h1, "class", "text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl mb-8");
			add_location(h1, file, 22, 4, 488);
			attr_dev(div0, "class", "flex flex-wrap -m-4");
			add_location(div0, file, 28, 4, 722);
			attr_dev(div1, "class", "container px-5 py-24 mx-auto");
			add_location(div1, file, 21, 2, 440);
			attr_dev(section, "class", "text-gray-600 body-font");
			add_location(section, file, 20, 0, 395);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, div1);
			append_dev(div1, h1);
			append_dev(h1, span0);
			append_dev(span0, t1);
			append_dev(h1, t2);
			append_dev(h1, span1);
			append_dev(span1, t3);
			append_dev(div1, t4);
			append_dev(div1, div0);
			mount_component(postlist, div0, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*tag*/ 1) && title_value !== (title_value = "#" + /*tag*/ ctx[0])) {
				document.title = title_value;
			}

			if (!current || dirty & /*tag*/ 1) set_data_dev(t3, /*tag*/ ctx[0]);
			const postlist_changes = {};
			if (dirty & /*posts*/ 2) postlist_changes.posts = /*posts*/ ctx[1];
			postlist.$set(postlist_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(postlist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(postlist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(postlist);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload(page) {
	const { tag } = page.params;
	const posts = findByTag(tag);
	return { tag, posts };
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Btagu5D", slots, []);
	let { tag } = $$props, { posts } = $$props;
	const writable_props = ["tag", "posts"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Btagu5D> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("tag" in $$props) $$invalidate(0, tag = $$props.tag);
		if ("posts" in $$props) $$invalidate(1, posts = $$props.posts);
	};

	$$self.$capture_state = () => ({ findByTag, preload, PostList, tag, posts });

	$$self.$inject_state = $$props => {
		if ("tag" in $$props) $$invalidate(0, tag = $$props.tag);
		if ("posts" in $$props) $$invalidate(1, posts = $$props.posts);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [tag, posts];
}

class U5Btagu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { tag: 0, posts: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Btagu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*tag*/ ctx[0] === undefined && !("tag" in props)) {
			console.warn("<U5Btagu5D> was created without expected prop 'tag'");
		}

		if (/*posts*/ ctx[1] === undefined && !("posts" in props)) {
			console.warn("<U5Btagu5D> was created without expected prop 'posts'");
		}
	}

	get tag() {
		throw new Error("<U5Btagu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tag(value) {
		throw new Error("<U5Btagu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get posts() {
		throw new Error("<U5Btagu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<U5Btagu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Btagu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3RhZ10uOWRmNDY3YzAuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvdGFnL1t0YWddLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cclxuICBpbXBvcnQgeyBmaW5kQnlUYWcgfSBmcm9tIFwiLi4vLi4vcG9zdHMuanNcIjtcclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIHByZWxvYWQocGFnZSkge1xyXG4gICAgY29uc3QgeyB0YWcgfSA9IHBhZ2UucGFyYW1zO1xyXG4gICAgY29uc3QgcG9zdHMgPSBmaW5kQnlUYWcodGFnKTtcclxuXHJcbiAgICByZXR1cm4geyB0YWcsIHBvc3RzIH07XHJcbiAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgaW1wb3J0IFBvc3RMaXN0IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1Bvc3RMaXN0LnN2ZWx0ZVwiO1xyXG4gIGV4cG9ydCBsZXQgdGFnLCBwb3N0cztcclxuPC9zY3JpcHQ+XHJcblxyXG48c3ZlbHRlOmhlYWQ+XHJcbiAgPHRpdGxlPiN7dGFnfTwvdGl0bGU+XHJcbjwvc3ZlbHRlOmhlYWQ+XHJcblxyXG48c2VjdGlvbiBjbGFzcz1cInRleHQtZ3JheS02MDAgYm9keS1mb250XCI+XHJcbiAgPGRpdiBjbGFzcz1cImNvbnRhaW5lciBweC01IHB5LTI0IG14LWF1dG9cIj5cclxuICAgIDxoMVxyXG4gICAgICBjbGFzcz1cInRleHQtNHhsIHRyYWNraW5nLXRpZ2h0IGZvbnQtZXh0cmFib2xkIHRleHQtZ3JheS05MDAgc206dGV4dC01eGwgbWQ6dGV4dC02eGwgbWItOFwiXHJcbiAgICA+XHJcbiAgICAgIDxzcGFuIGNsYXNzPVwiYmxvY2sgeGw6aW5saW5lXCI+Izwvc3Bhbj5cclxuICAgICAgPHNwYW4gY2xhc3M9XCJibG9jayB0ZXh0LXBpbmstNjAwIHhsOmlubGluZVwiPnt0YWd9PC9zcGFuPlxyXG4gICAgPC9oMT5cclxuICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtd3JhcCAtbS00XCI+XHJcbiAgICAgIDxQb3N0TGlzdCB7cG9zdHN9IC8+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC9zZWN0aW9uPlxyXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OENBaUJXLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7O3FCQVNxQyxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3Q0FBSCxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUZBVDNDLEdBQUc7Ozs7K0RBU3FDLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBdkJwQyxPQUFPLENBQUMsSUFBSTtTQUNsQixHQUFHLEtBQUssSUFBSSxDQUFDLE1BQU07T0FDckIsS0FBSyxHQUFHLFNBQVMsQ0FBQyxHQUFHO1VBRWxCLEdBQUcsRUFBRSxLQUFLOzs7Ozs7T0FNVixHQUFHLGdCQUFFLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
