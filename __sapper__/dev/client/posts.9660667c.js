import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, b as space, e as element, t as text, c as create_component, y as query_selector_all, h as detach_dev, j as claim_space, f as claim_element, g as children, k as claim_text, l as claim_component, m as attr_dev, n as add_location, o as insert_dev, p as append_dev, q as mount_component, r as noop, u as transition_in, w as transition_out, x as destroy_component } from './client.66758637.js';
import { P as PostList } from './PostList.defe255b.js';
import { p as posts } from './Tags.a974cee7.js';
import './_commonjsHelpers.91583ccb.js';

/* src\routes\posts.svelte generated by Svelte v3.38.2 */

const file = "src\\routes\\posts.svelte";

function create_fragment(ctx) {
	let t0;
	let section;
	let div1;
	let h1;
	let span0;
	let t1;
	let t2;
	let span1;
	let t3;
	let t4;
	let div0;
	let postlist;
	let current;
	postlist = new PostList({ props: { posts }, $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			div1 = element("div");
			h1 = element("h1");
			span0 = element("span");
			t1 = text("Latest");
			t2 = space();
			span1 = element("span");
			t3 = text("Articles...");
			t4 = space();
			div0 = element("div");
			create_component(postlist.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-oofwcx\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div1 = claim_element(section_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h1 = claim_element(div1_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			span0 = claim_element(h1_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t1 = claim_text(span0_nodes, "Latest");
			span0_nodes.forEach(detach_dev);
			t2 = claim_space(h1_nodes);
			span1 = claim_element(h1_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t3 = claim_text(span1_nodes, "Articles...");
			span1_nodes.forEach(detach_dev);
			h1_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(postlist.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Sapper project template";
			attr_dev(span0, "class", "block xl:inline");
			add_location(span0, file, 15, 6, 442);
			attr_dev(span1, "class", "block text-pink-600 xl:inline");
			add_location(span1, file, 16, 6, 493);
			attr_dev(h1, "class", "text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl mb-8");
			add_location(h1, file, 12, 4, 327);
			attr_dev(div0, "class", "flex flex-wrap m-4");
			add_location(div0, file, 18, 4, 572);
			attr_dev(div1, "class", "container px-5 py-24 mx-auto");
			add_location(div1, file, 11, 2, 279);
			attr_dev(section, "class", "text-pink-500 body-font");
			add_location(section, file, 10, 0, 234);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, div1);
			append_dev(div1, h1);
			append_dev(h1, span0);
			append_dev(span0, t1);
			append_dev(h1, t2);
			append_dev(h1, span1);
			append_dev(span1, t3);
			append_dev(div1, t4);
			append_dev(div1, div0);
			mount_component(postlist, div0, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(postlist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(postlist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(postlist);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Posts", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Posts> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ PostList, posts });
	return [];
}

class Posts extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Posts",
			options,
			id: create_fragment.name
		});
	}
}

export default Posts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdHMuOTY2MDY2N2MuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
